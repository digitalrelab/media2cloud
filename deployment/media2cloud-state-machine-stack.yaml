AWSTemplateFormatVersion: "2010-09-09"

Description: (SO0050-statemachine) Media2Cloud - create ingest, analyis, video-analysis, audio-analysis, image-analysis, and document analysis state machine resources.

#
# Mappings to store fixed value of the solution
#
Mappings:
    Solution:
        Package:
            Ingest: "%PKG_INGEST%"
            AnalysisMonitor: "%PKG_ANALYSIS_MONITOR%"
            AudioAnalysis: "%PKG_AUDIO_ANALYSIS%"
            VideoAnalysis: "%PKG_VIDEO_ANALYSIS%"
            ImageAnalysis: "%PKG_IMAGE_ANALYSIS%"
            DocumentAnalysis: "%PKG_DOCUMENT_ANALYSIS%"
    Function:
        Handler:
            OnIngestStateMachine: index.onIngest
            OnAnalysisStateMachine: index.onAnalysisMonitor
            OnAudioAnalysisStateMachine: index.onAudioAnalysis
            OnVideoAnalysisStateMachine: index.onVideoAnalysis
            OnImageAnalysisStateMachine: index.onImageAnalysis
            OnDocumentAnalysisStateMachine: index.onDocumentAnalysis

Parameters:
    SolutionId:
        Type: String
        Description: solution ID
    RootStackName:
        Type: String
        Description: used to suffix resources
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    SolutionUuid:
        Type: String
        Description: unique solution uuid
    AnonymousUsage:
        Type: String
        Description: send ananymous usage data
        Default: "No"
        AllowedValues:
          - "No"
          - "Yes"
    S3Bucket:
        Type: String
        Description: solution bucket
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    KeyPrefix:
        Type: String
        Description: solution key prefix
    IngestBucket:
        Type: String
        Description: this is the ingest bucket specified by customer 
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    SNSTopicArn:
        Type: String
        Description: public status to SNS. Third Party should subscribe to receive the notification.
    ProxyBucket:
        Type: String
        Description: bucket to store proxies
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    ElasticsearchDomainName:
        Type: String
        Description: created by search-engine stack
    ElasticsearchDomainEndpoint:
        Type: String
        Description: created by search-engine stack
    ElasticsearchDomainIndexName:
        Type: String
        Description: created by search-engine stack
    WaitIntervalInSec:
        Type: Number
        Description: perically check state status (5 to 600) seconds
        MinValue: 5
        MaxValue: 600
        Default: 10
    IotHost:
        Type: String
        Description: Iot host
    IotTopic:
        Type: String
        Description: Iot topic
    MediaConvertEndpoint:
        Type: String
        Description: MediaConvert host
    LanguageCode:
        Type: String
        Description: Language code
    AIOptions:
        Type: String
        Description: AI Options
    FaceCollectionId:
        Type: String
        Description: default face collection id
    CustomVocabulary:
        Type: String
        Description: default custom vocabulary name
    MinConfidence:
        Type: Number
        Description: default min. confidence level
        MinValue: 1
        MaxValue: 99
    AwsSdkLayer:
        Type: String
        Description: AWS SDK layer
    CoreLibLayer:
        Type: String
        Description: Core Library layer
    MediainfoLayer:
        Type: String
        Description: Mediainfo layer
    ImageProcessLayer:
        Type: String
        Description: Image Process layer
    FixityLibLayer:
        Type: String
        Description: Fixity Library layer

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "General Configuration"
                Parameters:
                    - SolutionId
                    - RootStackName
                    - SolutionUuid
                    - AnonymousUsage
                    - S3Bucket
                    - KeyPrefix
            -
                Label:
                    default: "Created by parent stack"
                Parameters:
                    - IngestBucket
                    - SNSTopicArn
                    - ProxyBucket
                    - ElasticsearchDomainName
                    - ElasticsearchDomainEndpoint
                    - ElasticsearchDomainIndexName
                    - IotTopic
                    - IotHost
                    - IotTopic
                    - MediaConvertEndpoint
                    - LanguageCode
                    - AIOptions
                    - FaceCollectionId
                    - CustomVocabulary
                    - MinConfidence
                    - AwsSdkLayer
                    - CoreLibLayer
                    - MediainfoLayer
                    - ImageProcessLayer
                    - FixityLibLayer
            -
                Label:
                    default: "State Machine Configuration"
                Parameters:
                    - WaitIntervalInSec

        ParameterLabels:
            SolutionId:
                default: "Solution ID"
            RootStackName:
                default: "Top Stack Name"
            IngestBucket:
                default: "Glacier Bucket"
            SolutionUuid:
                default: "UUID"
            AnonymousUsage:
                default: "Anonymous usage"
            S3Bucket:
                default: "Solution Bucket"
            KeyPrefix:
                default: "Solution Key Prefix"
            SNSTopicArn:
                default: "SNS Topic Arn"
            ProxyBucket:
                default: "Media Analysis Bucket"
            ElasticsearchDomainName:
                default: "ES Domain Name"
            ElasticsearchDomainEndpoint:
                default: "ES Domain Endpoint"
            ElasticsearchDomainIndexName:
                default: "ES Index Name"
            WaitIntervalInSec:
                default: "Status Check Interval (in sec)"
            IotHost:
                default: "IoT Host"
            IotTopic:
                default: "IoT Topic"
            MediaConvertEndpoint:
                default: "MediaConvert Host"
            LanguageCode:
                default: "Default language code"
            AIOptions:
                default: "Default AI options"
            FaceCollectionId:
                default: "Rekognition collection Id"
            CustomVocabulary:
                default: "Transcribe vocabulary name"
            MinConfidence:
                default: "Minimum Confidence"
            AwsSdkLayer:
                default: "AWS SDK Layer"
            CoreLibLayer:
                default: "Core Library Layer"
            MediainfoLayer:
                default: "Mediainfo Layer"
            ImageProcessLayer:
                default: "Image Process Layer"
            FixityLibLayer:
                default: "Fixity Library Layer"

Resources:
    ################################################################################
    #
    # role for mediaconvert to allow S3 buckets
    #
    ################################################################################
    MediaConvertRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as MediaConvert service role needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "mediaconvert.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-mediaconvert"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            # Read input object
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                Resource: !Sub "arn:aws:s3:::${IngestBucket}/*"
                            # Write output object
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:PutObject"
                                Resource: !Sub "arn:aws:s3:::${ProxyBucket}/*"

    ################################################################################
    #
    # IAM service role for state machine to invoke state's lambda
    #
    ################################################################################
    StateMachineServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -
                    Effect: "Allow"
                    Action:
                        - "sts:AssumeRole"
                    Principal:
                        Service:
                            - !Sub "states.${AWS::Region}.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-statemachine-service-role"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action:
                                    - "lambda:InvokeFunction"
                                Resource:
                                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SolutionId}-${RootStackName}-*"

    ################################################################################
    #
    # Comprehend service role for async operations
    #
    ################################################################################
    ComprehendServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -
                    Effect: "Allow"
                    Action: "sts:AssumeRole"
                    Principal:
                        Service: "comprehend.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-comprehend-service-role"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:ListBucket"
                                Resource:
                                    - !Sub "arn:aws:s3:::${ProxyBucket}"
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                Resource:
                                    - !Sub "arn:aws:s3:::${ProxyBucket}/*"

    ################################################################################
    #
    # Ingest state machine resources (execution role, lambda, and state machine)
    #
    ################################################################################
    OnIngestStateMachineFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-ingest"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:ListBucket"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}"
                                - !Sub "arn:aws:s3:::${IngestBucket}"
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:GetObjectTagging"
                                - "s3:GetObjectVersionTagging"
                                - "s3:PutObjectTagging"
                                - "s3:PutObjectVersionTagging"
                            Resource:
                                - !Sub "arn:aws:s3:::${IngestBucket}/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectVersionAcl"
                                - "s3:SelectObjectContent"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:RestoreObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${IngestBucket}/*"
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:DeleteObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## MediaConvert
                        -
                            Effect: "Allow"
                            Action:
                                - "mediaConvert:DescribeEndpoints"
                                - "mediaConvert:CreateJob"
                                - "mediaConvert:GetJob"
                            Resource:
                                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:*"
                        -
                            ## MediaConvert requires pass role policy
                            Effect: "Allow"
                            Action:
                                - "iam:GetRole"
                                - "iam:PassRole"
                            Resource:
                                - !GetAtt MediaConvertRole.Arn

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            # state machine lambda does have read/write/delete accesses to solution tables
                            Resource:
                                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-*"

                        ## IoT
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:Publish"
                            Resource:
                                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopic}"

                        ## SNS
                        -
                            Effect: "Allow"
                            Action:
                                - "sns:Publish"
                            Resource:
                                - !Ref SNSTopicArn

                        ## Elasticsearch
                        -
                            Effect: "Allow"
                            Action:
                                - "es:ESHttpGet"
                                - "es:ESHttpPost"
                                - "es:ESHttpPut"
                                - "es:ESHttpPost"
                                - "es:ESHttpDelete"
                            Resource:
                                # Wildcards on ElasticSearch domain resources are
                                # present because documents are indexed based off of
                                # the Step Function job ID, which is unique per
                                # invocation.
                                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}"
                                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/*"

    OnIngestStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-ingest"
            Description: !Sub "(${SolutionId}) ingest state machine"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnIngestStateMachine"
            ]
            Role: !GetAtt OnIngestStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "Ingest"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
                - !Ref FixityLibLayer
                - !Ref MediainfoLayer
                - !Ref ImageProcessLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    OnIngestStateMachineFunctionLarge:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-ingest-large"
            Description: !Sub "(${SolutionId}) ingest state machine (large instance)"
            Runtime: nodejs10.x
            MemorySize: 2048
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnIngestStateMachine"
            ]
            Role: !GetAtt OnIngestStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "Ingest"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
                - !Ref FixityLibLayer
                - !Ref MediainfoLayer
                - !Ref ImageProcessLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    IngestStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-ingest"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "state machine to run mediainfo, create proxy, and update record",
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Result": "create-record",
                                    "ResultPath": "$.operation",
                                    "Next": "Create record"
                                },
                                "Create record": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Start checksum substate",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Record error"
                                        }
                                    ]
                                },
                                "Record error": {
                                    "Type": "Fail"
                                },
                                "Start checksum substate": {
                                    "Type": "Parallel",
                                    "Branches": [
                                        {
                                            "StartAt": "Check restore status",
                                            "States": {
                                                "Check restore status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "operation": "check-restore-status",
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Restore completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 4,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "Error"
                                                            ],
                                                            "Next": "Restore error"
                                                        }
                                                    ]
                                                },
                                                "Restore completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [{
                                                        "Variable": "$.status",
                                                        "StringEquals": "COMPLETED",
                                                        "Next": "Compute checksum"
                                                    }],
                                                    "Default": "Wait for restore"
                                                },
                                                "Wait for restore": {
                                                    "Type": "Wait",
                                                    "Seconds": 900,
                                                    "Next": "Check restore status"
                                                },
                                                "Restore error": {
                                                    "Type": "Fail"
                                                },
                                                "Compute checksum": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "operation": "compute-checksum",
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "More data?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 4,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "Error"
                                                            ],
                                                            "Next": "Checksum error"
                                                        }
                                                    ]
                                                },
                                                "More data?": {
                                                    "Type": "Choice",
                                                    "Choices": [{
                                                        "Variable": "$.status",
                                                        "StringEquals": "COMPLETED",
                                                        "Next": "Validate checksum"
                                                    }],
                                                    "Default": "Compute checksum"
                                                },
                                                "Validate checksum": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "operation": "validate-checksum",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Checksum completed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 4,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "Error"
                                                            ],
                                                            "Next": "Checksum error"
                                                        }
                                                    ]
                                                },
                                                "Checksum error": {
                                                    "Type": "Fail"
                                                },
                                                "Checksum completed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        }
                                    ],
                                    "Next": "Start proxy substate"
                                },
                                "Start proxy substate": {
                                    "Type": "Parallel",
                                    "Branches": [
                                        {
                                            "StartAt": "Is image?",
                                            "States": {
                                                "Is image?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable":  "$[0].next.src.type",
                                                            "StringEquals": "image",
                                                            "Next": "Run imageinfo"
                                                        }
                                                    ],
                                                    "OutputPath": "$[0]",
                                                    "Default": "Not an image"
                                                },
                                                "Not an image": {
                                                    "Type": "Succeed"
                                                },
                                                "Run imageinfo": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "operation": "run-imageinfo",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Image completed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Image error"
                                                        }
                                                    ]
                                                },
                                                "Image error": {
                                                    "Type": "Fail"
                                                },
                                                "Image completed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Is video or audio?",
                                            "States": {
                                                "Is video or audio?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Or": [
                                                                {
                                                                    "Variable":  "$[0].next.src.type",
                                                                    "StringEquals": "video"
                                                                },
                                                                {
                                                                    "Variable":  "$[0].next.src.type",
                                                                    "StringEquals": "audio"
                                                                }
                                                            ],
                                                            "Next": "Run mediainfo"
                                                        }
                                                    ],
                                                    "OutputPath": "$[0]",
                                                    "Default": "Not video nor audio"
                                                },
                                                "Not video nor audio": {
                                                    "Type": "Succeed"
                                                },
                                                "Run mediainfo": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "operation": "run-mediainfo",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Start transcode",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Mediainfo error"
                                                        }
                                                    ]
                                                },
                                                "Mediainfo error": {
                                                    "Type": "Fail"
                                                },
                                                "Start transcode": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "operation": "start-transcode",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Check transcode status",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 4,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "TranscodeError"
                                                            ],
                                                            "Next": "Transcode error"
                                                        }
                                                    ]
                                                },
                                                "Check transcode status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "operation": "check-transcode-status",
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Transcode completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "TranscodeError"
                                                            ],
                                                            "Next": "Transcode error"
                                                        }
                                                    ]
                                                },
                                                "Transcode completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Transcode completed"
                                                        }
                                                    ],
                                                    "Default": "Wait for transcoding"
                                                },
                                                "Wait for transcoding": {
                                                    "Type": "Wait",
                                                    "Seconds": 12,
                                                    "Next": "Check transcode status"
                                                },
                                                "Transcode error": {
                                                    "Type": "Fail"
                                                },
                                                "Transcode completed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        }
                                    ],
                                    "Next": "Update record"
                                },
                                "Update record": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "update-record",
                                        "uuid.$": "$[0].uuid",
                                        "status": "NOT_STARTED",
                                        "progress": 0,
                                        "input.$": "$"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "Error"
                                            ],
                                            "Next": "Update error"
                                        }
                                    ],
                                    "Next": "Index ingest results"
                                },
                                "Update error": {
                                    "Type": "Fail"
                                },
                                "Index ingest results": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "index-ingest-results",
                                        "uuid.$": "$.uuid",
                                        "status": "NOT_STARTED",
                                        "progress": 0,
                                        "input.$": "$.next"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "Error"
                                            ],
                                            "Next": "Index error"
                                        }
                                    ],
                                    "Next": "Completed"
                                },
                                "Index error": {
                                    "Type": "Fail"
                                },
                                "Completed": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "job-completed",
                                        "uuid.$": "$.uuid",
                                        "status.$": "$.status",
                                        "progress.$": "$.progress",
                                        "input.$": "$.next"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "End": true
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnIngestStateMachineFunction.Arn,
                            x1: !GetAtt OnIngestStateMachineFunctionLarge.Arn
                        }

    ################################################################################
    #
    # Analysis state machine resources (execution role, lambda, and state machine)
    #
    ################################################################################
    OnAnalysisStateMachineFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-analysis"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${IngestBucket}/*"
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## Step Functions
                        -
                            Effect: "Allow"
                            Action:
                                - "states:DescribeStateMachine"
                                - "states:StartExecution"
                            Resource:
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${SolutionId}-${RootStackName}-*"
                        -
                            Effect: "Allow"
                            Action:
                                - "states:DescribeExecution"
                                - "states:GetExecutionHistory"
                                - "states:StopExecution"
                            Resource:
                                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${SolutionId}-${RootStackName}-*:*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            # state machine lambda does have read/write/delete accesses to solution tables
                            Resource:
                                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-*"

                        ## IoT
                        -
                            Effect: "Allow"
                            Action:
                                - "iot:Publish"
                            Resource:
                                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopic}"

                        ## SNS
                        -
                            Effect: "Allow"
                            Action:
                                - "sns:Publish"
                            Resource:
                                - !Ref SNSTopicArn

                        ## Elasticsearch
                        -
                            Effect: "Allow"
                            Action:
                                - "es:ESHttpGet"
                                - "es:ESHttpPost"
                                - "es:ESHttpPut"
                                - "es:ESHttpPost"
                                - "es:ESHttpDelete"
                            Resource:
                                # Wildcards on ElasticSearch domain resources are
                                # present because documents are indexed based off of
                                # the Step Function job ID, which is unique per
                                # invocation.
                                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}"
                                - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomainName}/*"

                        ## Rekognition
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:ListFaces"
                            # Wildcards in the Rekognition resource ARNs are present
                            # due to Rekognition needing access to collections
                            Resource:
                                - !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/*"

    OnAnalysisStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-analysis"
            Description: !Sub "(${SolutionId}) monitor analysis sub state machines"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnAnalysisStateMachine"
            ]
            Role: !GetAtt OnAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "AnalysisMonitor"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    AnalysisStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-analysis"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Result": "start-analysis",
                                    "ResultPath": "$.operation",
                                    "Next": "Start analysis"
                                },
                                "Start analysis": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Wait for analysis",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Analysis error"
                                        }
                                    ]
                                },
                                "Wait for analysis": {
                                    "Type": "Wait",
                                    "Seconds": ${WaitIntervalInSec},
                                    "Next": "Check analysis status"
                                },
                                "Check analysis status": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "check-analysis-status",
                                        "uuid.$": "$.uuid",
                                        "status.$": "$.status",
                                        "progress.$": "$.progress",
                                        "input.$": "$.next"
                                    },
                                    "Next": "Analysis completed?",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Analysis error"
                                        }
                                    ]
                                },
                                "Analysis completed?": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.status",
                                            "StringEquals": "COMPLETED",
                                            "Next": "Collect analysis results"
                                        }
                                    ],
                                    "Default": "Wait for analysis"
                                },
                                "Collect analysis results": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "collect-analysis-results",
                                        "uuid.$": "$.uuid",
                                        "status": "NOT_STARTED",
                                        "progress": 0,
                                        "input.$": "$.next"
                                    },
                                    "Next": "Index analysis results",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Analysis error"
                                        }
                                    ]
                                },
                                "Analysis error": {
                                    "Type": "Fail"
                                },
                                "Index analysis results": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "index-analysis-results",
                                        "uuid.$": "$.uuid",
                                        "status": "NOT_STARTED",
                                        "progress": 0,
                                        "input.$": "$.next"
                                    },
                                    "Next": "Completed",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Index error"
                                        }
                                    ]
                                },
                                "Index error": {
                                    "Type": "Fail"
                                },
                                "Completed": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "job-completed",
                                        "uuid.$": "$.uuid",
                                        "status.$": "$.status",
                                        "progress.$": "$.progress",
                                        "input.$": "$.next"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "End": true
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnAnalysisStateMachineFunction.Arn
                        }

    ################################################################################
    #
    # Audio Analysis sub-state machine resources (execution role, lambda, and state machine)
    #
    ################################################################################
    OnAudioAnalysisStateMachineFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-audio-analysis"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectVersionAcl"
                                - "s3:SelectObjectContent"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            # state machine lambda does have read/write/delete accesses to solution tables
                            Resource:
                                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-*"

                        ### TODO: Policies below are for Transcribe/Comprehend/Rekognition
                        ###       May separate it to a different role!
                        ## IAM
                        -
                            Effect: "Allow"
                            Action:
                                - "iam:PassRole"
                            Resource:
                                - !GetAtt ComprehendServiceRole.Arn

                        ## Comprehend
                        -
                            Effect: "Allow"
                            Action:
                                - "comprehend:BatchDetectDominantLanguage"
                                - "comprehend:BatchDetectEntities"
                                - "comprehend:BatchDetectKeyPhrases"
                                - "comprehend:BatchDetectSentiment"
                                - "comprehend:BatchDetectSyntax"
                                - "comprehend:StartEntitiesDetectionJob"
                                - "comprehend:StartKeyPhrasesDetectionJob"
                                - "comprehend:StartDominantLanguageDetectionJob"
                                - "comprehend:StartSentimentDetectionJob"
                                - "comprehend:StartTopicsDetectionJob"
                                - "comprehend:StopDominantLanguageDetectionJob"
                                - "comprehend:StopEntitiesDetectionJob"
                                - "comprehend:StopKeyPhrasesDetectionJob"
                                - "comprehend:StopSentimentDetectionJob"
                                - "comprehend:DescribeDominantLanguageDetectionJob"
                                - "comprehend:DescribeEntitiesDetectionJob"
                                - "comprehend:DescribeKeyPhrasesDetectionJob"
                                - "comprehend:DescribeSentimentDetectionJob"
                                - "comprehend:DescribeTopicsDetectionJob"
                            # These actions require resource wildcards per the
                            # Comprehend documentation.
                            # https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-api-permissions-ref.html
                            Resource: !Join ["", ["*"]]

                        ## Transcribe
                        -
                            Effect: "Allow"
                            Action:
                                - "transcribe:GetTranscriptionJob"
                                - "transcribe:StartTranscriptionJob"
                            # These actions require resource wildcards per the
                            # Transcribe documentation.
                            # https://docs.aws.amazon.com/transcribe/latest/dg/asc-api-permissions-ref.html
                            Resource: !Join ["", ["*"]]

    OnAudioAnalysisStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-audio-analysis"
            Description: !Sub "(${SolutionId}) audio analysis sub state machines"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnAudioAnalysisStateMachine"
            ]
            Role: !GetAtt OnAudioAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "AudioAnalysis"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    OnAudioAnalysisStateMachineFunctionLarge:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-audio-analysis-large"
            Description: !Sub "(${SolutionId}) audio analysis sub state machines (large instance)"
            Runtime: nodejs10.x
            MemorySize: 384
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnAudioAnalysisStateMachine"
            ]
            Role: !GetAtt OnAudioAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "AudioAnalysis"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    AudioAnalysisStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-audio-analysis"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Result": "start-transcribe",
                                    "ResultPath": "$.operation",
                                    "Next": "Start transcribe"
                                },
                                "Start transcribe": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Wait for transcribe",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Transcribe error"
                                        }
                                    ]
                                },
                                "Wait for transcribe": {
                                    "Type": "Wait",
                                    "Seconds": 24,
                                    "Next": "Check transcribe status"
                                },
                                "Check transcribe status": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "check-transcribe-status",
                                        "uuid.$": "$.uuid",
                                        "status.$": "$.status",
                                        "progress.$": "$.progress",
                                        "input.$": "$.next"
                                    },
                                    "Next": "Transcribe completed?",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Transcribe error"
                                        }
                                    ]
                                },
                                "Transcribe completed?": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.status",
                                            "StringEquals": "COMPLETED",
                                            "Next": "Download transcripts"
                                        }
                                    ],
                                    "Default": "Wait for transcribe"
                                },
                                "Transcribe error": {
                                    "Type": "Fail"
                                },
                                "Download transcripts": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "operation": "download-transcripts",
                                        "uuid.$": "$.uuid",
                                        "status": "NOT_STARTED",
                                        "progress": 0,
                                        "input.$": "$.next"
                                    },
                                    "Next": "Start text analysis",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Download error"
                                        }
                                    ]
                                },
                                "Download error": {
                                    "Type": "Fail"
                                },
                                "Start text analysis": {
                                    "Type": "Parallel",
                                    "Branches": [
                                        {
                                            "StartAt": "Subtitle params",
                                            "States": {
                                                "Subtitle params": {
                                                    "Type": "Pass",
                                                    "Parameters": {
                                                        "operation": "create-subtitle",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Create subtitle"
                                                },
                                                "Create subtitle": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Next": "Subtitle completed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Subtitle error"
                                                        }
                                                    ]
                                                },
                                                "Subtitle completed": {
                                                    "Type": "Succeed"
                                                },
                                                "Subtitle error": {
                                                    "Type": "Fail"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Entity params",
                                            "States": {
                                                "Entity params": {
                                                    "Type": "Pass",
                                                    "Parameters": {
                                                        "operation": "start-entity",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Entity enabled?"
                                                },
                                                "Entity enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.entity",
                                                            "BooleanEquals": false,
                                                            "Next": "Entity skipped"
                                                        }
                                                    ],
                                                    "Default": "Start entity"
                                                },
                                                "Entity skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start entity": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Did entity start?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 8,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Entity error"
                                                        }
                                                    ]
                                                },
                                                "Did entity start?" : {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "NO_DATA",
                                                            "Next": "Entity skipped"
                                                        }
                                                    ],
                                                    "Default": "Create entity track"
                                                },
                                                "Create entity track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "operation": "create-entity-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Entity succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Entity error"
                                                        }
                                                    ]
                                                },
                                                "Entity error": {
                                                    "Type": "Fail"
                                                },
                                                "Entity succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Keyphrase params",
                                            "States": {
                                                "Keyphrase params": {
                                                    "Type": "Pass",
                                                    "Parameters": {
                                                        "operation": "start-keyphrase",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Keyphrase enabled?"
                                                },
                                                "Keyphrase enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.keyphrase",
                                                            "BooleanEquals": false,
                                                            "Next": "Keyphrase skipped"
                                                        }
                                                    ],
                                                    "Default": "Start keyphrase"
                                                },
                                                "Keyphrase skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start keyphrase": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Did keyphrase start?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 8,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Keyphrase error"
                                                        }
                                                    ]
                                                },
                                                "Did keyphrase start?" : {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "NO_DATA",
                                                            "Next": "Keyphrase skipped"
                                                        }
                                                    ],
                                                    "Default": "Create keyphrase track"
                                                },
                                                "Create keyphrase track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "operation": "create-keyphrase-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Keyphrase succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Keyphrase error"
                                                        }
                                                    ]
                                                },
                                                "Keyphrase error": {
                                                    "Type": "Fail"
                                                },
                                                "Keyphrase succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Sentiment params",
                                            "States": {
                                                "Sentiment params": {
                                                    "Type": "Pass",
                                                    "Parameters": {
                                                        "operation": "start-sentiment",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Sentiment enabled?"
                                                },
                                                "Sentiment enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.sentiment",
                                                            "BooleanEquals": false,
                                                            "Next": "Sentiment skipped"
                                                        }
                                                    ],
                                                    "Default": "Start sentiment"
                                                },
                                                "Sentiment skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start sentiment": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Did sentiment start?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 8,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Sentiment error"
                                                        }
                                                    ]
                                                },
                                                "Did sentiment start?" : {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "NO_DATA",
                                                            "Next": "Sentiment skipped"
                                                        }
                                                    ],
                                                    "Default": "Create sentiment track"
                                                },
                                                "Create sentiment track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "operation": "create-sentiment-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Sentiment succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Sentiment error"
                                                        }
                                                    ]
                                                },
                                                "Sentiment error": {
                                                    "Type": "Fail"
                                                },
                                                "Sentiment succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Topic params",
                                            "States": {
                                                "Topic params": {
                                                    "Type": "Pass",
                                                    "Parameters": {
                                                        "operation": "start-topic",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Topic enabled?"
                                                },
                                                "Topic enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.topic",
                                                            "BooleanEquals": false,
                                                            "Next": "Topic skipped"
                                                        }
                                                    ],
                                                    "Default": "Start topic"
                                                },
                                                "Topic skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start topic": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Did topic start?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Topic error"
                                                        }
                                                    ]
                                                },
                                                "Did topic start?" : {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "NO_DATA",
                                                            "Next": "Topic skipped"
                                                        }
                                                    ],
                                                    "Default": "Wait for topic"
                                                },
                                                "Wait for topic": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check topic status"
                                                },
                                                "Check topic status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-topic-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Topic completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Topic error"
                                                        }
                                                    ]
                                                },
                                                "Topic completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect topic results"
                                                        }
                                                    ],
                                                    "Default": "Wait for topic"
                                                },
                                                "Collect topic results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-topic-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Topic succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Topic error"
                                                        }
                                                    ]
                                                },
                                                "Topic error": {
                                                    "Type": "Fail"
                                                },
                                                "Topic succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Classification params",
                                            "States": {
                                                "Classification params": {
                                                    "Type": "Pass",
                                                    "Parameters": {
                                                        "operation": "start-classification",
                                                        "uuid.$": "$.uuid",
                                                        "status": "NOT_STARTED",
                                                        "progress": 0,
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Classification enabled?"
                                                },
                                                "Classification enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.classification",
                                                            "BooleanEquals": false,
                                                            "Next": "Classification skipped"
                                                        }
                                                    ],
                                                    "Default": "Start classification"
                                                },
                                                "Classification skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start classification": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for classification",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Classification error"
                                                        }
                                                    ]
                                                },
                                                "Wait for classification": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check classification status"
                                                },
                                                "Check classification status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-classification-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Classification completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Classification error"
                                                        }
                                                    ]
                                                },
                                                "Classification completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect classification results"
                                                        }
                                                    ],
                                                    "Default": "Wait for classification"
                                                },
                                                "Collect classification results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-classification-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Classification succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Classification error"
                                                        }
                                                    ]
                                                },
                                                "Classification error": {
                                                    "Type": "Fail"
                                                },
                                                "Classification succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        }
                                    ],
                                    "Next": "Completed"
                                },
                                "Completed": {
                                    "Type": "Succeed"
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnAudioAnalysisStateMachineFunction.Arn,
                            x1: !GetAtt OnAudioAnalysisStateMachineFunctionLarge.Arn
                        }

    ################################################################################
    #
    # Video Analysis sub-state machine resources (execution role, lambda, and state machine)
    #
    ################################################################################
    OnVideoAnalysisStateMachineFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-video-analysis"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectVersionAcl"
                                - "s3:SelectObjectContent"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## DynamoDB
                        -
                            Effect: "Allow"
                            Action:
                                - "dynamodb:DeleteItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateItem"
                                - "dynamodb:Attributes"
                                - "dynamodb:LeadingKeys"
                                - "dynamodb:ReturnConsumedCapacity"
                                - "dynamodb:ReturnValues"
                                - "dynamodb:Select"
                            # state machine lambda does have read/write/delete accesses to solution tables
                            Resource:
                                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SolutionId}-${RootStackName}-*"

                        ## Rekognition
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:StartContentModeration"
                                - "rekognition:StartCelebrityRecognition"
                                - "rekognition:StartFaceDetection"
                                - "rekognition:StartFaceSearch"
                                - "rekognition:StartLabelDetection"
                                - "rekognition:StartPersonTracking"
                                - "rekognition:GetContentModeration"
                                - "rekognition:GetCelebrityRecognition"
                                - "rekognition:GetFaceDetection"
                                - "rekognition:GetFaceSearch"
                                - "rekognition:GetLabelDetection"
                                - "rekognition:GetPersonTracking"
                                - "rekognition:CreateCollection"
                                - "rekognition:DeleteCollection"
                                - "rekognition:IndexFaces"
                            # Wildcards in the Rekognition resource ARNs are present
                            # due to Rekognition needing access to collections that
                            # have IDs based off of a UUID generator.
                            # https://docs.aws.amazon.com/rekognition/latest/dg/api-permissions-reference.html
                            Resource: !Join ["", ["*"]]

    OnVideoAnalysisStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-video-analysis"
            Description: !Sub "(${SolutionId}) video analysis sub state machines"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnVideoAnalysisStateMachine"
            ]
            Role: !GetAtt OnVideoAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "VideoAnalysis"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    OnVideoAnalysisStateMachineFunctionLarge:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-video-analysis-large"
            Description: !Sub "(${SolutionId}) video analysis sub state machines (large instance)"
            Runtime: nodejs10.x
            MemorySize: 384
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnVideoAnalysisStateMachine"
            ]
            Role: !GetAtt OnVideoAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "VideoAnalysis"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    VideoAnalysisStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-video-analysis"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Next": "Start video analysis"
                                },
                                "Start video analysis": {
                                    "Type": "Parallel",
                                    "Branches": [
                                        {
                                            "StartAt": "Celeb params",
                                            "States": {
                                                "Celeb params": {
                                                    "Type": "Pass",
                                                    "Result": "start-celeb",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Celeb enabled?"
                                                },
                                                "Celeb enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.celeb",
                                                            "BooleanEquals": false,
                                                            "Next": "Celeb skipped"
                                                        }
                                                    ],
                                                    "Default": "Start celeb"
                                                },
                                                "Celeb skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start celeb": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for celeb",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Celeb error"
                                                        }
                                                    ]
                                                },
                                                "Wait for celeb": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check celeb status"
                                                },
                                                "Check celeb status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-celeb-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Celeb completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Celeb error"
                                                        }
                                                    ]
                                                },
                                                "Celeb completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect celeb results"
                                                        }
                                                    ],
                                                    "Default": "Wait for celeb"
                                                },
                                                "Collect celeb results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-celeb-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Create celeb track",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Celeb error"
                                                        }
                                                    ]
                                                },
                                                "Create celeb track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "create-celeb-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "More celeb track?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Celeb error"
                                                        }
                                                    ]
                                                },
                                                "More celeb track?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Celeb succeed"
                                                        }
                                                    ],
                                                    "Default": "Create celeb track"
                                                },
                                                "Celeb error": {
                                                    "Type": "Fail"
                                                },
                                                "Celeb succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Face params",
                                            "States": {
                                                "Face params": {
                                                    "Type": "Pass",
                                                    "Result": "start-face",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Face enabled?"
                                                },
                                                "Face enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.face",
                                                            "BooleanEquals": false,
                                                            "Next": "Face skipped"
                                                        }
                                                    ],
                                                    "Default": "Start face"
                                                },
                                                "Face skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start face": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for face",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face error"
                                                        }
                                                    ]
                                                },
                                                "Wait for face": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check face status"
                                                },
                                                "Check face status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-face-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Face completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face error"
                                                        }
                                                    ]
                                                },
                                                "Face completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect face results"
                                                        }
                                                    ],
                                                    "Default": "Wait for face"
                                                },
                                                "Collect face results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-face-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Face succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face error"
                                                        }
                                                    ]
                                                },
                                                "Face error": {
                                                    "Type": "Fail"
                                                },
                                                "Face succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Face-Match params",
                                            "States": {
                                                "Face-Match params": {
                                                    "Type": "Pass",
                                                    "Result": "start-face-match",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Face-Match enabled?"
                                                },
                                                "Face-Match enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.faceMatch",
                                                            "BooleanEquals": false,
                                                            "Next": "Face-Match skipped"
                                                        }
                                                    ],
                                                    "Default": "Start face-match"
                                                },
                                                "Face-Match skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start face-match": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for face-match",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face-Match error"
                                                        }
                                                    ]
                                                },
                                                "Wait for face-match": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check face-match status"
                                                },
                                                "Check face-match status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-face-match-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Face-Match completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face-Match error"
                                                        }
                                                    ]
                                                },
                                                "Face-Match completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect face-match results"
                                                        }
                                                    ],
                                                    "Default": "Wait for face-match"
                                                },
                                                "Collect face-match results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-face-match-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Create face-match track",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face-Match error"
                                                        }
                                                    ]
                                                },
                                                "Create face-match track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "create-face-match-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "More face-match track?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Face-Match error"
                                                        }
                                                    ]
                                                },
                                                "More face-match track?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Face-Match succeed"
                                                        }
                                                    ],
                                                    "Default": "Create face-match track"
                                                },
                                                "Face-Match error": {
                                                    "Type": "Fail"
                                                },
                                                "Face-Match succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Label params",
                                            "States": {
                                                "Label params": {
                                                    "Type": "Pass",
                                                    "Result": "start-label",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Label enabled?"
                                                },
                                                "Label enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.label",
                                                            "BooleanEquals": false,
                                                            "Next": "Label skipped"
                                                        }
                                                    ],
                                                    "Default": "Start label"
                                                },
                                                "Label skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start label": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for label",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Label error"
                                                        }
                                                    ]
                                                },
                                                "Wait for label": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check label status"
                                                },
                                                "Check label status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-label-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Label completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Label error"
                                                        }
                                                    ]
                                                },
                                                "Label completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect label results"
                                                        }
                                                    ],
                                                    "Default": "Wait for label"
                                                },
                                                "Collect label results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-label-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Create label track",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Label error"
                                                        }
                                                    ]
                                                },
                                                "Create label track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "create-label-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "More label track?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Label error"
                                                        }
                                                    ]
                                                },
                                                "More label track?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Label succeed"
                                                        }
                                                    ],
                                                    "Default": "Create label track"
                                                },

                                                "Label error": {
                                                    "Type": "Fail"
                                                },
                                                "Label succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Moderation params",
                                            "States": {
                                                "Moderation params": {
                                                    "Type": "Pass",
                                                    "Result": "start-moderation",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Moderation enabled?"
                                                },
                                                "Moderation enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.moderation",
                                                            "BooleanEquals": false,
                                                            "Next": "Moderation skipped"
                                                        }
                                                    ],
                                                    "Default": "Start moderation"
                                                },
                                                "Moderation skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start moderation": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for moderation",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Moderation error"
                                                        }
                                                    ]
                                                },
                                                "Wait for moderation": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check moderation status"
                                                },
                                                "Check moderation status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-moderation-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Moderation completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Moderation error"
                                                        }
                                                    ]
                                                },
                                                "Moderation completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect moderation results"
                                                        }
                                                    ],
                                                    "Default": "Wait for moderation"
                                                },
                                                "Collect moderation results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-moderation-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Create moderation track",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Moderation error"
                                                        }
                                                    ]
                                                },
                                                "Create moderation track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "create-moderation-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "More moderation track?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Moderation error"
                                                        }
                                                    ]
                                                },
                                                "More moderation track?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Moderation succeed"
                                                        }
                                                    ],
                                                    "Default": "Create moderation track"
                                                },
                                                "Moderation error": {
                                                    "Type": "Fail"
                                                },
                                                "Moderation succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Person params",
                                            "States": {
                                                "Person params": {
                                                    "Type": "Pass",
                                                    "Result": "start-person",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Person enabled?"
                                                },
                                                "Person enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.person",
                                                            "BooleanEquals": false,
                                                            "Next": "Person skipped"
                                                        }
                                                    ],
                                                    "Default": "Start person"
                                                },
                                                "Person skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start person": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for person",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Person error"
                                                        }
                                                    ]
                                                },
                                                "Wait for person": {
                                                    "Type": "Wait",
                                                    "Seconds": 24,
                                                    "Next": "Check person status"
                                                },
                                                "Check person status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-person-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Person completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Person error"
                                                        }
                                                    ]
                                                },
                                                "Person completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect person results"
                                                        }
                                                    ],
                                                    "Default": "Wait for person"
                                                },
                                                "Collect person results": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-person-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Create person track",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Person error"
                                                        }
                                                    ]
                                                },
                                                "Create person track": {
                                                    "Type": "Task",
                                                    "Resource": "${x1}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "create-person-track",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "More person track?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Person error"
                                                        }
                                                    ]
                                                },
                                                "More person track?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Person succeed"
                                                        }
                                                    ],
                                                    "Default": "Create person track"
                                                },
                                                "Person error": {
                                                    "Type": "Fail"
                                                },
                                                "Person succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        }
                                    ],
                                    "Next": "Completed"
                                },
                                "Completed": {
                                    "Type": "Succeed"
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnVideoAnalysisStateMachineFunction.Arn,
                            x1: !GetAtt OnVideoAnalysisStateMachineFunctionLarge.Arn
                        }

    ################################################################################
    #
    # Image Analysis sub-state machine resources (execution role, lambda, and state machine)
    #
    ################################################################################
    OnImageAnalysisStateMachineFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-image-analysis"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectVersionAcl"
                                - "s3:SelectObjectContent"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## Rekognition
                        -
                            Effect: "Allow"
                            Action:
                                - "rekognition:DetectFaces"
                                - "rekognition:DetectLabels"
                                - "rekognition:DetectModerationLabels"
                                - "rekognition:DetectText"
                                - "rekognition:GetCelebrityInfo"
                                - "rekognition:RecognizeCelebrities"
                                - "rekognition:SearchFacesByImage"
                                - "rekognition:SearchFaces"
                                - "rekognition:CreateCollection"
                                - "rekognition:DeleteCollection"
                                - "rekognition:IndexFaces"
                            # Wildcards in the Rekognition resource ARNs are present
                            # due to Rekognition needing access to collections that
                            # have IDs based off of a UUID generator.
                            # https://docs.aws.amazon.com/rekognition/latest/dg/api-permissions-reference.html
                            Resource: !Join ["", ["*"]]

    OnImageAnalysisStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-image-analysis"
            Description: !Sub "(${SolutionId}) image analysis sub state machines"
            Runtime: nodejs10.x
            MemorySize: 384
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnImageAnalysisStateMachine"
            ]
            Role: !GetAtt OnImageAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "ImageAnalysis"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
                - !Ref ImageProcessLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    ImageAnalysisStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-image-analysis"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Result": "start-image-analysis",
                                    "ResultPath": "$.operation",
                                    "Next": "Start image analysis"
                                },
                                "Start image analysis": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Next": "Completed",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "Next": "Image analysis error"
                                        }
                                    ]
                                },
                                "Image analysis error": {
                                    "Type": "Fail"
                                },
                                "Completed": {
                                    "Type": "Succeed"
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnImageAnalysisStateMachineFunction.Arn
                        }

    ################################################################################
    #
    # Document Analysis sub-state machine resources (execution role, lambda, and state machine)
    #
    ################################################################################
    OnDocumentAnalysisStateMachineFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as state machine lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "sts:AssumeRole"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub "${SolutionId}-${RootStackName}-document-analysis"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                        ## S3
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:GetObject"
                                - "s3:PutObject"
                                - "s3:PutObjectAcl"
                                - "s3:PutObjectVersionAcl"
                                - "s3:SelectObjectContent"
                            Resource:
                                - !Sub "arn:aws:s3:::${ProxyBucket}/*"

                        ## CloudWatch Logs
                        -
                            Effect: "Allow"
                            Action:
                                - "logs:CreateLogGroup"
                                - "logs:CreateLogStream"
                                - "logs:PutLogEvents"
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                        ## Textract
                        -
                            Effect: "Allow"
                            Action:
                                - "textract:StartDocumentTextDetection"
                                - "textract:GetDocumentTextDetection"
                                - "textract:StartDocumentAnalysis"
                                - "textract:GetDocumentAnalysis"
                            # Wildcards in the Textract resource ARNs are present
                            # per permission reference, Resource must be wildcard
                            # https://docs.aws.amazon.com/textract/latest/dg/api-permissions-reference.html
                            Resource: !Join ["", ["*"]]

    OnDocumentAnalysisStateMachineFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${SolutionId}-${RootStackName}-document-analysis"
            Description: !Sub "(${SolutionId}) document analysis sub state machines"
            Runtime: nodejs10.x
            MemorySize: 128
            Timeout: 900
            Handler: !FindInMap [
                "Function",
                "Handler",
                "OnDocumentAnalysisStateMachine"
            ]
            Role: !GetAtt OnDocumentAnalysisStateMachineFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub [
                    "${KeyPrefix}/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "Package",
                            "DocumentAnalysis"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_STACKNAME: !Ref RootStackName
                    ENV_SOLUTION_UUID: !Ref SolutionUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_IOT_HOST: !Ref IotHost
                    ENV_IOT_TOPIC: !Ref IotTopic
                    ENV_INGEST_BUCKET: !Ref IngestBucket
                    ENV_PROXY_BUCKET: !Ref ProxyBucket
                    ENV_SNS_TOPIC_ARN: !Ref SNSTopicArn
                    #ENV_MEDIACONVERT_HOST: !Ref MediaConvertEndpoint
                    #ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_DEFAULT_LANGUAGE_CODE: !Ref LanguageCode
                    ENV_DEFAULT_AI_OPTIONS: !Ref AIOptions
                    ENV_DEFAULT_COLLECTION_ID: !Ref FaceCollectionId
                    ENV_DEFAULT_VOCABULARY: !Ref CustomVocabulary
                    ENV_DEFAULT_MINCONFIDENCE: !Ref MinConfidence
                    ENV_COMPREHEND_ROLE: !GetAtt ComprehendServiceRole.Arn
                    ENV_ES_DOMAIN_ENDPOINT: !Ref ElasticsearchDomainEndpoint
                    ENV_ES_INDEX_NAME: !Ref ElasticsearchDomainIndexName

    DocumentAnalysisStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub "${SolutionId}-${RootStackName}-document-analysis"
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "StartAt": "Sanity check",
                            "States": {
                                "Sanity check": {
                                    "Type": "Pass",
                                    "Next": "Start textract analysis"
                                },
                                "Start textract analysis": {
                                    "Type": "Parallel",
                                    "Branches": [
                                        {
                                            "StartAt": "Document-text params",
                                            "States": {
                                                "Document-text params": {
                                                    "Type": "Pass",
                                                    "Result": "start-document-text",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Document-text enabled?"
                                                },
                                                "Document-text enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.document",
                                                            "BooleanEquals": false,
                                                            "Next": "Document-text skipped"
                                                        }
                                                    ],
                                                    "Default": "Start document-text"
                                                },
                                                "Document-text skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start document-text": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for document-text",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Document-text error"
                                                        }
                                                    ]
                                                },
                                                "Wait for document-text": {
                                                    "Type": "Wait",
                                                    "Seconds": ${WaitIntervalInSec},
                                                    "Next": "Check document-text status"
                                                },
                                                "Check document-text status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-document-text-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Document-text completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Document-text error"
                                                        }
                                                    ]
                                                },
                                                "Document-text completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect document-text results"
                                                        }
                                                    ],
                                                    "Default": "Wait for document-text"
                                                },
                                                "Collect document-text results": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-document-text-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Document-text succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Document-text error"
                                                        }
                                                    ]
                                                },
                                                "Document-text error": {
                                                    "Type": "Fail"
                                                },
                                                "Document-text succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        },
                                        {
                                            "StartAt": "Document-analysis params",
                                            "States": {
                                                "Document-analysis params": {
                                                    "Type": "Pass",
                                                    "Result": "start-document-analysis",
                                                    "ResultPath": "$.operation",
                                                    "Next": "Document-analysis enabled?"
                                                },
                                                "Document-analysis enabled?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.input.aiOptions.document",
                                                            "BooleanEquals": false,
                                                            "Next": "Document-analysis skipped"
                                                        }
                                                    ],
                                                    "Default": "Start document-analysis"
                                                },
                                                "Document-analysis skipped": {
                                                    "Type": "Succeed"
                                                },
                                                "Start document-analysis": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Next": "Wait for document-analysis",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 2,
                                                            "BackoffRate": 1.2
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Document-analysis error"
                                                        }
                                                    ]
                                                },
                                                "Wait for document-analysis": {
                                                    "Type": "Wait",
                                                    "Seconds": ${WaitIntervalInSec},
                                                    "Next": "Check document-analysis status"
                                                },
                                                "Check document-analysis status": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "check-document-analysis-status",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Document-analysis completed?",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Document-analysis error"
                                                        }
                                                    ]
                                                },
                                                "Document-analysis completed?": {
                                                    "Type": "Choice",
                                                    "Choices": [
                                                        {
                                                            "Variable": "$.status",
                                                            "StringEquals": "COMPLETED",
                                                            "Next": "Collect document-analysis results"
                                                        }
                                                    ],
                                                    "Default": "Wait for document-analysis"
                                                },
                                                "Collect document-analysis results": {
                                                    "Type": "Task",
                                                    "Resource": "${x0}",
                                                    "Parameters": {
                                                        "uuid.$": "$.uuid",
                                                        "status.$": "$.status",
                                                        "progress.$": "$.progress",
                                                        "operation": "collect-document-analysis-results",
                                                        "input.$": "$.next"
                                                    },
                                                    "Next": "Document-analysis succeed",
                                                    "Retry": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "IntervalSeconds": 1,
                                                            "MaxAttempts": 6,
                                                            "BackoffRate": 1.1
                                                        }
                                                    ],
                                                    "Catch": [
                                                        {
                                                            "ErrorEquals": [
                                                                "States.ALL"
                                                            ],
                                                            "Next": "Document-analysis error"
                                                        }
                                                    ]
                                                },
                                                "Document-analysis error": {
                                                    "Type": "Fail"
                                                },
                                                "Document-analysis succeed": {
                                                    "Type": "Succeed"
                                                }
                                            }
                                        }
                                    ],
                                    "Next": "Completed"
                                },
                                "Completed": {
                                    "Type": "Succeed"
                                }
                            }
                        }
                    -
                        {
                            x0: !GetAtt OnDocumentAnalysisStateMachineFunction.Arn
                        }

Outputs:
    MediaConvertRoleArn:
        Value: !GetAtt MediaConvertRole.Arn
        Description: Role Arn (State Machine Execution)

    ExecutionRoleList:
        Value: !Join [
            ",", [
                !Ref OnIngestStateMachineFunctionRole,
                !Ref OnAnalysisStateMachineFunctionRole,
                !Ref OnAudioAnalysisStateMachineFunctionRole,
                !Ref OnVideoAnalysisStateMachineFunctionRole,
                !Ref OnImageAnalysisStateMachineFunctionRole,
                !Ref OnDocumentAnalysisStateMachineFunctionRole
            ]
        ]
        Description: List of Execution Roles (State Machine)

    ServiceRoleArn:
        Value: !GetAtt StateMachineServiceRole.Arn
        Description: Role Arn (State Machine Service)

    OnIngestStateMachineArn:
        Value: !GetAtt OnIngestStateMachineFunction.Arn
        Description: Lambda Arn (index.onIngest)

    OnAnalysisStateMachineArn:
        Value: !GetAtt OnAnalysisStateMachineFunction.Arn
        Description: Lambda Arn (index.onAnalysisMonitor)

    OnAudioAnalysisStateMachineArn:
        Value: !GetAtt OnAudioAnalysisStateMachineFunction.Arn
        Description: Lambda Arn (index.onAudioAnalysis)

    OnVideoAnalysisStateMachineArn:
        Value: !GetAtt OnVideoAnalysisStateMachineFunction.Arn
        Description: Lambda Arn (index.onVideoAnalysis)

    OnImageAnalysisStateMachineArn:
        Value: !GetAtt OnImageAnalysisStateMachineFunction.Arn
        Description: Lambda Arn (index.onImageAnalysis)

    OnDocumentAnalysisStateMachineArn:
        Value: !GetAtt OnDocumentAnalysisStateMachineFunction.Arn
        Description: Lambda Arn (index.onDocumentAnalysis)

    IngestStateMachineArn:
        Value: !Ref IngestStateMachine
        Description: State Machine Arn (Ingest)

    IngestStateMachineName:
        Value: !GetAtt IngestStateMachine.Name
        Description: State Machine Name (Ingest)

    AnalysisStateMachineArn:
        Value: !Ref AnalysisStateMachine
        Description: State Machine Arn (Analysis)

    AnalysisStateMachineName:
        Value: !GetAtt AnalysisStateMachine.Name
        Description: State Machine Name (Analysis)

    AudioAnalysisStateMachineArn:
        Value: !Ref AudioAnalysisStateMachine
        Description: State Machine Arn (Audio Analysis)

    AudioAnalysisStateMachineName:
        Value: !GetAtt AudioAnalysisStateMachine.Name
        Description: State Machine Name (Audio Analysis)

    VideoAnalysisStateMachineArn:
        Value: !Ref VideoAnalysisStateMachine
        Description: State Machine Arn (Video Analysis)

    VideoAnalysisStateMachineName:
        Value: !GetAtt VideoAnalysisStateMachine.Name
        Description: State Machine Name (Video Analysis)

    ImageAnalysisStateMachineArn:
        Value: !Ref ImageAnalysisStateMachine
        Description: State Machine Arn (Image Analysis)

    ImageAnalysisStateMachineName:
        Value: !GetAtt ImageAnalysisStateMachine.Name
        Description: State Machine Name (Image Analysis)

    DocumentAnalysisStateMachineArn:
        Value: !Ref DocumentAnalysisStateMachine
        Description: State Machine Arn (Document Analysis)

    DocumentAnalysisStateMachineName:
        Value: !GetAtt DocumentAnalysisStateMachine.Name
        Description: State Machine Name (Document Analysis)

    LambdaFunctionList:
        Value: !Join [
            ",", [
                !Ref OnIngestStateMachineFunction,
                !Ref OnIngestStateMachineFunctionLarge,
                !Ref OnAnalysisStateMachineFunction,
                !Ref OnAudioAnalysisStateMachineFunction,
                !Ref OnAudioAnalysisStateMachineFunctionLarge,
                !Ref OnVideoAnalysisStateMachineFunction,
                !Ref OnVideoAnalysisStateMachineFunctionLarge,
                !Ref OnImageAnalysisStateMachineFunction,
                !Ref OnDocumentAnalysisStateMachineFunction
            ]
        ]
        Description: List of Lambda functions (State Machine)

    StateMachineArnList:
        Value: !Join [
            ",", [
                !Ref IngestStateMachine,
                !Ref AnalysisStateMachine,
                !Ref AudioAnalysisStateMachine,
                !Ref VideoAnalysisStateMachine,
                !Ref ImageAnalysisStateMachine,
                !Ref DocumentAnalysisStateMachine,
            ]
        ]
        Description: List of State Machines
